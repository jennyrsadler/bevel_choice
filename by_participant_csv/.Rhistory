group.mod16 = lm(portions_SSB ~ DREScat, data = df_new)
anova(group.mod16)
group.mod16 = lm(scan_._correct ~ DREScat, data = df_new)
anova(group.mod16)
group.mod16 = lm(PORTIONS_SSB ~ DREScat, data = df_new)
anova(group.mod16)
group.mod16 = lm(bas_rewardresponsiveness ~ DREScat, data = df_new)
anova(group.mod16)
group.mod16 = lm(bas_funseeking ~ DREScat, data = df_new)
anova(group.mod16)
group.mod16 = lm(bas_drive ~ DREScat, data = df_new)
anova(group.mod16)
group.mod16 = lm(sensitivity_reward ~ DREScat, data = df_new)
anova(group.mod16)
group.mod16 = lm(sensitivity_punish ~ DREScat, data = df_new)
anova(group.mod16)
group.mod16 = lm(sweetstim_level ~ DREScat, data = df_new)
anova(group.mod16)
group.mod16 = lm(sweet4pleasent ~ DREScat, data = df_new)
anova(group.mod16)
group.mod16 = lm(bitter4pleasent ~ DREScat, data = df_new)
anova(group.mod16)
group.mod16 = lm(preTThunger ~ DREScat, data = df_new)
anova(group.mod16)
group.mod16 = lm(preTTthirst ~ DREScat, data = df_new)
anova(group.mod16)
group.mod16 = lm(bitterstim_level ~ DREScat, data = df_new)
anova(group.mod16)
describe.by(bas_drive, DREScat, data = df_new)
describeBy(bas_drive, DREScat, data = df_new)
#SIGNIFICANT
describeBy(bas_drive, DREScat, data = df_new)
#SIGNIFICANT
describeBy(df_new$bas_drive, df_new$DREScat)
#DESCRIBE SIGNIFICANT DIFFERENCES
describeBy(df_new$bas_drive, df_new$DREScat)
describeBy(df_new$sweetstim_level, df_new$DREScat)
describeBy(df_new$PORTIONS_SSB, df_new$DREScat)
describeBy(df_new$TOTAL_KCAL, df_new$DREScat)
describeBy(df_new$BMI, df_new$DREScat)
describeBy(df_new$nback_accuracy, df_new$DREScat)
ggline(df_new, x = "DREScat", y = "BMI",
add = c("mean_se", "jitter"),
order = c("low_restraint", "high_restraint"),
ylab = "Weight", xlab = "Treatment")
library(ggplot2)
ggline(df_new, x = "DREScat", y = "BMI",
add = c("mean_se", "jitter"),
order = c("low_restraint", "high_restraint"),
ylab = "Weight", xlab = "Treatment")
p <- ggplot(df_new, aes(DREScat, nback_accuracy))
p + geom_boxplot()
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
p <- ggplot(df_new, aes(DREScat, BMI))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
p <- ggplot(df_new, aes(DREScat, PORTIONS_SSB))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
p <- ggplot(df_new, aes(DREScat, sweetstim_level))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
chisq.test(data$DREScat, data$test_result_group, correct=FALSE)
chisq.test(df_new$DREScat, df_new$test_result_group, correct=FALSE)
tbl <- with(df_new, table(DREScat, test_result_group))
barplot(tbl, beside = TRUE, legend = TRUE)
p <- ggplot(df_new, aes(DREScat, sweetstim_level))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
quantile(df$DRES, c(.33, .67))
names(data1)
library(readxl)
data1 <- read.csv("/Users/jennygilbert/Google Drive/NIBL/Projects/18-0417 BeveL/data/clean_data/clean_bevel.csv")
names(data1)
df <- data1[-c(91,92,93), ]
library(ggplot2)
library(psych)
group.mod1 = lm(DRES ~ sex, data = df)
anova(group.mod1)
#Categorical Analysis (see Lowe & Graham 2009 for general distributions)
describe(df$DRES)
quantile(df$DRES, c(.33, .67))
attach(df)
df$DREScat[DRES > 2.5] <- "high_restraint"
df$DREScat[DRES > 1.837 & DRES <= 2.5] <- "mid_restraint"
df$DREScat[DRES <= 1.837] <- "low_restraint"
detach(df)
print(df$DREScat)
#Select top third and bottom third
df_new <- df[ which(df$DREScat=='high_restraint' | df$DREScat =="low_restraint"), ]
group.mod1 = lm(DRES ~ DREScat, data = df_new)
anova(group.mod1)
t.test(DRES ~ DREScat, data = df_new)
chisq.test(df_new$DREScat, df_new$sex, correct=FALSE)
t.test(DRES ~ DREScat, data = df_new)
t.test(external_eating ~ DREScat, data = df_new)
t.test(emotional_eating ~ DREScat, data = df_new)
#test for group differences
t.test(BMI ~ DREScat, data = df_new)
t.test(age ~ DREScat, data = df_new)
table(df_new$DREScat, df_new$sex)
#DESCRIBE SIGNIFICANT DIFFERENCES
describeBy(df_new$bas_drive, df_new$DREScat)
t.test(bis ~ DREScat, data = df_new)
t.test(bas ~ DREScat, data = df_new)
#test for group differences
describeBy(df_new$BMI, df_new$DREScat)
describeBy(df_new$age, df_new$DREScat)
describeBy(df_new$DRES, df_new$DREScat)
describeBy(df_new$external_eating, df_new$DREScat)
describeBy(df_new$emotional_eating, df_new$DREScat)
describeBy(df_new$bis, df_new$DREScat)
t.test(bis ~ DREScat, data = df_new)
describeBy(df_new$bas, df_new$DREScat)
t.test(bas ~ DREScat, data = df_new)
describeBy(df_new$bas_drive, df_new$DREScat)
t.test(bas_drive ~ DREScat, data = df_new)
describeBy(df_new$TOTAL_KCAL, df_new$DREScat)
t.test(TOTAL_KCAL ~ DREScat, data = df_new)
describeBy(df_new$PORTION_SSB, df_new$DREScat)
t.test(PORTION_SSB ~ DREScat, data = df_new)
describeBy(df_new$PORTIONS_SSB, df_new$DREScat)
t.test(PORTIONS_SSB ~ DREScat, data = df_new)
describeBy(df_new$nback_accurary, df_new$DREScat)
t.test(nback_accurary ~ DREScat, data = df_new)
describeBy(df_new$nback_accuracy, df_new$DREScat)
t.test(nback_accuracy ~ DREScat, data = df_new)
describeBy(df_new$scan_._correct, df_new$DREScat)
t.test(scan_._correct ~ DREScat, data = df_new)
table(df_new$DREScat, df_new$sweetstim_level)
chisq.test(df_new$DREScat, df_new$sweetstim_level, correct=FALSE)
table(df_new$DREScat, df_new$bitterstim_level)
chisq.test(df_new$DREScat, df_new$bitterstim_level, correct=FALSE)
3/30
2/30
7/30
18/30
5/29
11/29
6/29
7/29
table(df_new$DREScat, df_new$sex)
3/30
5/30
3/30
19/30
1/29
1/29
11/29
16/29
t.test(age ~ DREScat, data = df_new)
describeBy(df_new$scan_._correct, df_new$DREScat)
t.test(scan_._correct ~ DREScat, data = df_new)
describeBy(df_new$sensitivity_punish, df_new$DREScat)
t.test(sensitivity_punish ~ DREScat, data = df_new)
describeBy(df_new$sensitivity_reward, df_new$DREScat)
t.test(sensitivity_reward ~ DREScat, data = df_new)
table(df_new$DREScat, df_new$test_result_group)
chisq.test(df_new$DREScat, df_new$test_result_group, correct=FALSE)
margin.table(t, 1)
t<- table(df_new$DREScat, df_new$test_result_group)
margin.table(t, 1)
margin.table(t, 2)
prop.table(t)
#PLOTS
p <- ggplot(df_new, aes(DREScat, BMI))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
p <- ggplot(df_new, aes(DREScat, DRES))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
p <- ggplot(df_new, aes(DREScat, emotional_eating))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
p <- ggplot(df_new, aes(DREScat, bas_drive))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
p <- ggplot(df_new, aes(DREScat, TOTAL_KCAL))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
p <- ggplot(df_new, aes(DREScat, PORTIONS_SSB))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
p <- ggplot(df_new, aes(DREScat, nabck_accuracy))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
p <- ggplot(df_new, aes(DREScat, nback_accuracy))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
tbl <- with(df_new, table(DREScat, test_result_group))
barplot(tbl, beside = TRUE, legend = TRUE)
tbl <- with(df_new, table(DREScat, sweetstim_level))
barplot(tbl, beside = TRUE, legend = TRUE)
tbl <- with(df_new, table(DREScat, bitterstim_level))
barplot(tbl, beside = TRUE, legend = TRUE)
library(readxl)
data1 <- read.csv("/Users/jennygilbert/Google Drive/NIBL/Projects/18-0417 BeveL/data/clean_data/clean_bevel.csv")
names(data1)
df <- data1[-c(91,92,93), ]
library(ggplot2)
library(psych)
df$DRES <- (df$DEBQ1 + df$DEBQ2 + df$DEBQ3 + df$DEBQ4 + df$DEBQ5 +df$DEBQ6 + df$DEBQ7 + df$DEBQ8 + df$DEBQ9 + df$DEBQ10)/10
group.mod1 = lm(DRES ~ sex, data = df)
anova(group.mod1)
#Categorical Analysis (see Lowe & Graham 2009 for general distributions)
describe(df$DRES)
quantile(df$DRES, c(.33, .67))
attach(df)
df$DREScat[DRES > 2.5] <- "high_restraint"
df$DREScat[DRES > 1.837 & DRES <= 2.5] <- "mid_restraint"
df$DREScat[DRES <= 1.837] <- "low_restraint"
detach(df)
print(df$DREScat)
#Select top third and bottom third
df_new <- df[ which(df$DREScat=='high_restraint' | df$DREScat =="low_restraint"), ]
df_new$RT_avg <- (df_new$scan_RT_ab + df_new$scan_RT_cd + df_new$scan_RT_ef)/3
describeBy(df_new$df_new$RT_avg, df_new$DREScat)
t.test(df_new$RT_avg ~ DREScat, data = df_new)
Sys.setenv(USE_CXX14 = 1)
library("rstan")
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
library(hBayesDM)
output <- pst_gainloss_Q(data = '/Users/jennygilbert/Documents/RW_bevel/hBayes_txt_file_inputs/mergedfile.txt',niter = 4000, nwarmup = 1000, nchain = 4, ncore = 1, nthin = 1, inits = "random",indPars = "mean",modelRegressor = FALSE, vb = FALSE,inc_postpred = FALSE,adapt_delta = 0.95, stepsize = 1,max_treedepth = 10)
Sys.setenv(USE_CXX14 = 1)
output <- pst_gainloss_Q(data = '/Users/jennygilbert/Documents/RW_bevel/hBayes_txt_file_inputs/mergedfile.txt',niter = 4000, nwarmup = 1000, nchain = 4, ncore = 1, nthin = 1, inits = "random",indPars = "mean",modelRegressor = FALSE, vb = FALSE,inc_postpred = FALSE,adapt_delta = 0.99, stepsize = 1,max_treedepth = 10)
# Visually check convergence of the sampling chains (should like like 'hairy caterpillars')
plot(output1, type="trace", fontSize=11)
# Visually check convergence of the sampling chains (should like like 'hairy caterpillars')
plot(output, type="trace", fontSize=11)
plot(output, type="trace", inc_warmup=T) # traceplot of hyper parameters w/ warmup samples
plot(output) #You can also plot the posterior distributions of the hyper (group) parameters with plot
plotInd(output, "ID") #To visualize individual parameters, you can use our newly updated function called plotInd
plotInd(output, "subjID") #To visualize individual parameters, you can use our newly updated function called plotInd
plotInd(my_fit, pars = "alpha_pos", show_density = T)
plotInd(output, pars = "alpha_pos", show_density = T)
# Show the WAIC and LOOIC model fit estimates
print(output$allIndPars)
plotInd(output[2], pars = "alpha_pos", show_density = T)
# Check Rhat values (all Rhat values should be less than or equal to 1.1)
rhat(output)
plotInd(output, pars = "alpha_pos", include = allIndPairs$subjID[1:10], show_density = T)
allIndPairs$subjID
output$allIndPairs$subjID
output$allIndPairs
plotInd(output, pars = "alpha_pos"[1:20], include = allIndPairs$subjID[1:10], show_density = T)
plotInd(output, pars = "alpha_pos"[1:20], show_density = T)
plotInd(output, pars = "alpha_pos"[1:20], show_density = T)
plotInd(output, pars = "alpha_pos", show_density = T)
library(readxl)
data1 <- read.csv("/Users/jennygilbert/Google Drive/NIBL/Projects/18-0417 BeveL/data/clean_data/clean_bevel.csv")
names(data1)
data <- data1[-c(12,91,92,93), ]
library(ggplot2)
library(psych)
#Criteria Count
sum(data$sex == 'M')
#Criteria Count
sum(data$scan_trials_AB_run1 > '.65')
#Criteria Count
sum(data$scan_.correct_ab_run1 > '.65')
#Criteria Count
data$scan_.correct_ab_run1
#Criteria Count
sum(data$scan_.correct_ab_run1 > .65)
#Criteria Count
sum(data$scan_.correct_ab_run1 > .65 | data$scan_.correct_ab_run2 > .65 )
#Criteria Count
sum(data$scan_.correct_ab_run1 > .65 | data$scan_.correct_ab_run2 > .65 | data$scan_.correct_ab_run3 > .65 | data$scan_.correct_ab_run4 > .65)
#Criteria Count
sum(data$scan_.correct_ab_run1 > .65 | data$scan_.correct_ab_run2 > .65 & data$scan_.correct_ab_run3 > .65 & data$scan_.correct_ab_run4 > .65)
#Criteria Count
sum(data$scan_.correct_ab_run1 > .65 & data$scan_.correct_ab_run2 > .65 & data$scan_.correct_ab_run3 > .65 & data$scan_.correct_ab_run4 > .65)
library(readxl)
data1 <- read.csv("/Users/jennygilbert/Google Drive/NIBL/Projects/18-0417 BeveL/data/clean_data/clean_bevel.csv")
names(data1)
data <- data1[-c(12,91,92,93), ]
library(ggplot2)
library(psych)
###### CRITERIA
describeBy(data$BMI, data$criteria_met)
t.test(BMI ~ DREScat, data = df_new)
###### CRITERIA
describeBy(data$BMI, data$criteria_met)
t.test(BMI ~ criteria_met, data = data)
chisq.test(data$criteria_met, data$test_result_group, correct=FALSE)
tbl <- with(data, table(test_result_group, criteria_met))
barplot(tbl, beside = TRUE, legend = TRUE)
describeBy(data$sensitivity_reward, data$criteria_met)
t.test(sensitivity_reward ~ criteria_met, data = data)
p <- ggplot(data, aes(criteria_met, sensitivity_reward))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
describeBy(data$sensitivity_punish, data$criteria_met)
t.test(sensitivity_punish ~ criteria_met, data = data)
describeBy(data$nback_accuracy, data$criteria_met)
t.test(BMI ~ criteria_met, data = data)
t.test(nback_accuracy ~ criteria_met, data = data)
describeBy(data$DRES, data$criteria_met)
t.test(DRES ~ criteria_met, data = data)
describeBy(data$bis, data$criteria_met)
t.test(bis ~ criteria_met, data = data)
describeBy(data$bas, data$criteria_met)
t.test(bas ~ criteria_met, data = data)
describeBy(data$TOTAL_KCAL, data$criteria_met)
t.test(TOTAL_KCAL ~ criteria_met, data = data)
t.test(PERC_KCAL_FAT ~ criteria_met, data = data)
t.test(PERC_KCAL_SUG ~ criteria_met, data = data)
t.test(SPSRQ_reward ~ criteria_met, data = data)
t.test(SPSRQ_punish ~ criteria_met, data = data)
t.test(SPSRQ_punishment ~ criteria_met, data = data)
chisq.test(data$criteria_met, data$sex, correct=FALSE)
chisq.test(data$criteria_met, data$sex, correct=FALSE)
tbl <- with(data, table(sex, criteria_met))
tbl
Sys.setenv(USE_CXX14 = 1)
library("rstan")
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
library(hBayesDM)
output <- pst_gainloss_Q(data = '/Users/jennygilbert/Documents/RW_bevel/hBayes_txt_file_inputs/learner/learner_all.txt',niter = 4000, nwarmup = 1000, nchain = 4, ncore = 1, nthin = 1, inits = "random",indPars = "mean",modelRegressor = FALSE, vb = FALSE,inc_postpred = FALSE,adapt_delta = 0.99, stepsize = 1,max_treedepth = 10)
# Visually check convergence of the sampling chains (should like like 'hairy caterpillars')
plot(output, type="trace", fontSize=11)
plot(output, type="trace", inc_warmup=T) # traceplot of hyper parameters w/ warmup samples
plot(output) #You can also plot the posterior distributions of the hyper (group) parameters with plot
plotInd(output, pars = "alpha_pos", show_density = T)
# Check Rhat values (all Rhat values should be less than or equal to 1.1)
rhat(output)
# Plot the posterior distributions of the hyper-parameters (distributions should be unimodal)
plot(output)
# Show the WAIC and LOOIC model fit estimates
print(output$allIndPars)
library(readxl)
data1 <- read.csv("/Users/jennygilbert/Google Drive/NIBL/Projects/18-0417 BeveL/data/clean_data/clean_bevel.csv")
names(data1)
df <- data1[-c(91,92,93), ]
library(ggplot2)
library(psych)
df$DRES <- (df$DEBQ1 + df$DEBQ2 + df$DEBQ3 + df$DEBQ4 + df$DEBQ5 +df$DEBQ6 + df$DEBQ7 + df$DEBQ8 + df$DEBQ9 + df$DEBQ10)/10
group.mod1 = lm(DRES ~ sex, data = df)
anova(group.mod1)
#Categorical Analysis (see Lowe & Graham 2009 for general distributions)
describe(df$DRES)
quantile(df$DRES, c(.33, .67))
attach(df)
df$DREScat[DRES > 2.5] <- "high_restraint"
df$DREScat[DRES > 1.837 & DRES <= 2.5] <- "mid_restraint"
df$DREScat[DRES <= 1.837] <- "low_restraint"
detach(df)
print(df$DREScat)
#Select top third and bottom third
df_new <- df[ which(df$DREScat=='high_restraint' | df$DREScat =="low_restraint"), ]
df_new$ID
df_new$DREScat
#PLOTS
p <- ggplot(df_new, aes(x=reorder(DREScat,BMI, FUN = median), y=BMI, fill=DREScat))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2) +xlab("Dietary Restraint Groups") +
ylab("Body Mass Index") + theme_bw(base_size = 14)
library(readxl)
data1 <- read.csv("/Users/jennygilbert/Google Drive/NIBL/Projects/18-0417 BeveL/data/clean_data/clean_bevel.csv")
names(data1)
df <- data1[-c(91,92,93), ]
library(ggplot2)
library(psych)
df$DRES <- (df$DEBQ1 + df$DEBQ2 + df$DEBQ3 + df$DEBQ4 + df$DEBQ5 +df$DEBQ6 + df$DEBQ7 + df$DEBQ8 + df$DEBQ9 + df$DEBQ10)/10
group.mod1 = lm(DRES ~ sex, data = df)
anova(group.mod1)
#Categorical Analysis (see Lowe & Graham 2009 for general distributions)
describe(df$DRES)
quantile(df$DRES, c(.33, .67))
attach(df)
df$DREScat[DRES > 2.5] <- "high_restraint"
df$DREScat[DRES > 1.837 & DRES <= 2.5] <- "mid_restraint"
df$DREScat[DRES <= 1.837] <- "low_restraint"
detach(df)
print(df$DREScat)
#Select top third and bottom third
df_new <- df[ which(df$DREScat=='high_restraint' | df$DREScat =="low_restraint"), ]
#PLOTS
p <- ggplot(df_new, aes(x=reorder(DREScat,BMI, FUN = median), y=BMI, fill=DREScat))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2) +xlab("Dietary Restraint Groups") +
ylab("Body Mass Index") + theme_bw(base_size = 14)
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2) +xlab("Dietary Restraint Groups") +
ylab("Body Mass Index") + theme_bw(base_size = 14) + scale_fill_discrete(name="Dietary Restraint Groups",
breaks=c("high_restraint", "low_restraint"),
labels=c("High Dietary Restraint", "Low Dietary Restraint"))
library(xlsx)
install.packages("xlsx")
library(xlsx)
write.table(df_new, "~/Desktop/mydata.txt", sep="\t")
#test for group differences
describeBy(df_new$BMI, df_new$DREScat)
t.test(BMI ~ DREScat, data = df_new)
t<- table(df_new$DREScat, df_new$bitterstim_level)
prop.table(t)
chisq.test(df_new$DREScat, df_new$bitterstim_level, correct=FALSE)
#test for group differences
describeBy(df_new$BMI, df_new$DREScat)
t.test(BMI ~ DREScat, data = df_new)
describeBy(df_new$nback_accuracy, df_new$DREScat)
t.test(nback_accuracy ~ DREScat, data = df_new)
t<-table(df_new$DREScat, df_new$sweetstim_level)
prop.table(t)
chisq.test(df_new$DREScat, df_new$sweetstim_level, correct=FALSE)
chisq.test(df_new$DREScat, df_new$bitterstim_level, correct=FALSE)
library(readxl)
data1 <- read.csv("/Users/jennygilbert/Google Drive/NIBL/Projects/18-0417 BeveL/data/clean_data/clean_bevel.csv")
names(data1)
df <- data1[-c(91,92,93), ]
library(ggplot2)
library(psych)
df$DRES <- (df$DEBQ1 + df$DEBQ2 + df$DEBQ3 + df$DEBQ4 + df$DEBQ5 +df$DEBQ6 + df$DEBQ7 + df$DEBQ8 + df$DEBQ9 + df$DEBQ10)/10
group.mod1 = lm(DRES ~ sex, data = df)
anova(group.mod1)
#Categorical Analysis (see Lowe & Graham 2009 for general distributions)
describe(df$DRES)
quantile(df$DRES, c(.33, .67))
attach(df)
df$DREScat[DRES > 2.5] <- "high_restraint"
df$DREScat[DRES > 1.837 & DRES <= 2.5] <- "mid_restraint"
df$DREScat[DRES <= 1.837] <- "low_restraint"
detach(df)
print(df$DREScat)
#Select top third and bottom third
df_new <- df[ which(df$DREScat=='high_restraint' | df$DREScat =="low_restraint"), ]
t.test(sweet4sweet ~ DREScat, data = df_new)
t.test(sweet4bitter ~ DREScat, data = df_new)
t.test(sweet3sweett ~ DREScat, data = df_new)
t.test(sweet3bitter ~ DREScat, data = df_new)
t.test(sweet2sweet ~ DREScat, data = df_new)
t.test(sweet2bitter ~ DREScat, data = df_new)
t.test(sweet1sweet ~ DREScat, data = df_new)
t.test(sweet1bitter ~ DREScat, data = df_new)
t.test(bitter4bitter ~ DREScat, data = df_new)
t.test(bitter4sweet ~ DREScat, data = df_new)
t.test(bitter3bitter ~ DREScat, data = df_new)
t.test(bitter3sweet ~ DREScat, data = df_new)
t.test(bitter2bitter ~ DREScat, data = df_new)
t.test(bitter2sweet ~ DREScat, data = df_new)
t.test(bitter1bitter ~ DREScat, data = df_new)
t.test(bitter1sweet ~ DREScat, data = df_new)
t.test(bitter4pleasent ~ DREScat, data = df_new)
t.test(bitter4intense ~ DREScat, data = df_new)
t.test(sweet3sweet ~ DREScat, data = df_new)
t.test(sweet4intense ~ DREScat, data = df_new)
t.test(sweet3intense ~ DREScat, data = df_new)
t.test(sweet2intense ~ DREScat, data = df_new)
t.test(sweet1intense ~ DREScat, data = df_new)
t.test(bitter4intense ~ DREScat, data = df_new)
t.test(bitter3intense ~ DREScat, data = df_new)
t.test(bitter2intense ~ DREScat, data = df_new)
t.test(bitter1intense ~ DREScat, data = df_new)
library(readxl)
data1 <- read.csv("/Users/jennygilbert/Google Drive/NIBL/Projects/18-0417 BeveL/data/clean_data/clean_bevel.csv")
names(data1)
df <- data1[-c(91,92,93), ]
library(ggplot2)
library(psych)
df$DRES <- (df$DEBQ1 + df$DEBQ2 + df$DEBQ3 + df$DEBQ4 + df$DEBQ5 +df$DEBQ6 + df$DEBQ7 + df$DEBQ8 + df$DEBQ9 + df$DEBQ10)/10
group.mod1 = lm(DRES ~ sex, data = df)
anova(group.mod1)
#Categorical Analysis (see Lowe & Graham 2009 for general distributions)
describe(df$DRES)
quantile(df$DRES, c(.33, .67))
attach(df)
df$DREScat[DRES > 2.5] <- "high_restraint"
df$DREScat[DRES > 1.837 & DRES <= 2.5] <- "mid_restraint"
df$DREScat[DRES <= 1.837] <- "low_restraint"
detach(df)
print(df$DREScat)
#Select top third and bottom third
df_new <- df[ which(df$DREScat=='high_restraint' | df$DREScat =="low_restraint"), ]
describeBy(df_new$sweetstim_pleasent, df_new$DREScat)
t.test(sweetstim_pleasent ~ DREScat, data = df_new)
describeBy(df_new$bitterstim_pleasent, df_new$DREScat)
t.test(bitterstim_pleasent ~ DREScat, data = df_new)
data = read.table('/Users/jennygilbert/Documents/bevel_choice/01_test.csv', header=TRUE, sep=',')
View(data)
View(data)
ggplot(data=data, aes(x=reinforcer_running, y=a_corr_prob)) +
geom_line() +
geom_point()
library(ggplot2)
ggplot(data=data, aes(x=reinforcer_running, y=a_corr_prob)) +
geom_line() +
geom_point()
ggplot(data=subset(data, !is.na(a_corr_prob) aes(x=reinforcer_running, y=a_corr_prob)) +
ggplot(data=subset(data, !is.na(a_corr_prob)), aes(x=reinforcer_running, y=a_corr_prob)) +
geom_line() + geom_point()
ggplot(data=subset(data, !is.na(b_corr_prob)), aes(x=reinforcer_running, y=b_corr_prob)) +
geom_line() + geom_point()
install.packages('ggrepell')
install.packages('ggrepel')
library(ggrepel)
ggplot(data=subset(data, !is.na(a_corr_prob)), aes(x=reinforcer_running, y=a_corr_prob)) +
geom_line() + geom_point() + gg_text()
ggplot(data=subset(data, !is.na(a_corr_prob)), aes(x=reinforcer_running, y=a_corr_prob)) +
geom_line() + geom_point() + geom_text()
ggplot(data=subset(data, !is.na(a_corr_prob)), aes(x=reinforcer_running, y=a_corr_prob, label = choice)) +
geom_line() + geom_point() + geom_text()
ggplot(data=subset(data, !is.na(a_corr_prob)), aes(x=reinforcer_running, y=a_corr_prob, label = outcome)) +
geom_line() + geom_point() + geom_text()
library(ggplot2)
library(ggrepel)
library(data.table)
library(psych)
setwd("/Users/jennygilbert/Documents/bevel_choice/by_participant_csv")
myfiles <- list.files(pattern = ".csv")
for (file in myfiles) {
df = read.table(file, header=TRUE, sep=',')
setDT(df)
DT.m1 = melt(df, measure.vars = c("a_learnedprob_correct", "b_learnedprob_correct","c_learnedprob_correct",
"d_learnedprob_correct", "e_learnedprob_correct", "f_learnedprob_correct"),
variable.name = "Shape", value.name = "learned_prob")
#Get rid of the NA's and missing
DT.m1[DT.m1==""] <- NA
df <- na.omit(DT.m1)
#Plot learned probability
ggplot(df, aes(x=X, y=learned_prob)) + geom_line(aes(colour=Shape)) +
labs(title = "Learned Probability over time", x = "Trials", y = "Learned Probability", color = "Shapes")
#Plot reinforcer responses
counts <- prop.table(table(df$reinforcer_response))
barplot(counts, main="Response Distribution",
ylab="Percent of Responses", xlab='Response to Reinforcement', col = rainbow(5))
}
