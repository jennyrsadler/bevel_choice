geom_line() +
geom_point()
ggplot(data=subset(data, !is.na(a_corr_prob) aes(x=reinforcer_running, y=a_corr_prob)) +
ggplot(data=subset(data, !is.na(a_corr_prob)), aes(x=reinforcer_running, y=a_corr_prob)) +
geom_line() + geom_point()
ggplot(data=subset(data, !is.na(b_corr_prob)), aes(x=reinforcer_running, y=b_corr_prob)) +
geom_line() + geom_point()
install.packages('ggrepell')
install.packages('ggrepel')
library(ggrepel)
ggplot(data=subset(data, !is.na(a_corr_prob)), aes(x=reinforcer_running, y=a_corr_prob)) +
geom_line() + geom_point() + gg_text()
ggplot(data=subset(data, !is.na(a_corr_prob)), aes(x=reinforcer_running, y=a_corr_prob)) +
geom_line() + geom_point() + geom_text()
ggplot(data=subset(data, !is.na(a_corr_prob)), aes(x=reinforcer_running, y=a_corr_prob, label = choice)) +
geom_line() + geom_point() + geom_text()
ggplot(data=subset(data, !is.na(a_corr_prob)), aes(x=reinforcer_running, y=a_corr_prob, label = outcome)) +
geom_line() + geom_point() + geom_text()
data = read.table('/Users/jennygilbert/Documents/bevel_choice/by_participant_csv/01.csv', header=TRUE, sep=',')
install.packages('ggrepel')
library(ggplot2)
library(ggrepel)
ggplot(data=subset(data, !is.na(a_corr_prob)), aes(x=reinforcer_running, y=a_corr_prob, label = outcome)) +
geom_line() + geom_point() + geom_text()
ggplot(data=subset(data, !is.na(a_corr_prob)), aes(x=reinforcer_running, y=a_learnedprob_correct, label = reinforcer_response)) +
geom_line() + geom_point() + geom_text()
ggplot(data=subset(data, !is.na(a_learnedprob_correct)), aes(x=reinforcer_running, y=a_learnedprob_correct, label = reinforcer_response)) +
geom_line() + geom_point() + geom_text()
ggplot(data=subset(data, !is.na(a_learnedprob_correct)), aes(y=a_learnedprob_correct, label = reinforcer_response)) +
geom_line() + geom_point() + geom_text()
ggplot(data=subset(data, !is.na(a_learnedprob_correct)), aes(x= X, y=a_learnedprob_correct, label = reinforcer_response)) +
geom_line() + geom_point() + geom_text()
ggplot(data, aes(x=X, y=reinforcer_response, fill=reinforcer_response)) +
geom_area()
ggplot(data, aes(x=X, y=choice, fill=reinforcer_response)) +
geom_area()
my_func=function(vec){ as.numeric(vec[3]) / sum(data$reinforcer_response[data$X==vec[2]]) *100 }
data$prop=apply(data , 1 , my_func)
data$prop=apply(data , 1 , my_func)
ggplot(data=subset(data, !is.na(a_learnedprob_correct)), aes(x= X, y=a_learnedprob_correct, label = choice)) +
geom_line() + geom_point() + geom_text()
#Line plot of learned probabilities
test_data_long <- melt(data, id="trial")
install.packages("reshape2")
library(reshape2)
#Line plot of learned probabilities
test_data_long <- melt(data, id="trial")
#Line plot of learned probabilities
test_data_long <- melt(data, id="X")
#Line plot of learned probabilities
test_data_long <- melt(data(c('a_learnedprob_corr', 'b_learnedprob_corr')), id="X")
#Line plot of learned probabilities
test_data_long <- melt(data('a_learnedprob_corr', 'b_learnedprob_corr'), id="X")
#Line plot of learned probabilities
test_data_long <- melt(data = (c('a_learnedprob_corr', 'b_learnedprob_corr')), id="X")
#Line plot of learned probabilities
test_data_long <- melt(data = (c('a_learnedprob_corr', 'b_learnedprob_corr', 'c_learnedprob_corr',
'd_learnedprob_corr', 'e_learnedprob_corr', 'f_learnedprob_corr')), id="X")
ggplot(data=test_data_long,aes(x=X, y=value, colour=variable)) + geom_line()
ggplot(data=test_data_long,aes(x='X', y=value, colour=variable)) + geom_line()
test_data_long
library(tidyr)
data %>%
gather(key,value, a_learnedprob_correct, b_learnedprob_correct) %>%
ggplot(aes(x=X, y=value, colour=key)) +
geom_line()
data %>%
gather(key,value, a_learnedprob_correct, b_learnedprob_correct) %>%
ggplot(data=subset(data, !is.na(value)), aes(x= X, y=value, colour=key)) +
geom_line() + geom_point()
data <- data[!is.na(data)]
data %>%
gather(key,value, a_learnedprob_correct, b_learnedprob_correct) %>%
ggplot(data=subset(data, !is.na(value)), aes(x= X, y=value, colour=key)) +
geom_line() + geom_point()
library(data.table)
data = read.table('/Users/jennygilbert/Documents/bevel_choice/by_participant_csv/01.csv', header=TRUE, sep=',')
library(ggplot2)
library(ggrepel)
library(data.table)
setDT(data)
melt(data(), id = 1, measure=patterns("a_learnedprob_correct", "b_learnedprob_correct"), value.name = c("a", "b"),
variable.name = "learned_prob")
DT.m1 = melt(data, measure.vars = c("a_learnedprob_correct", "b_learnedprob_correct"), variable.name = "shape", value.name = "learned_prob")
ggplot(DT.m1, aes(x=X, y=learned_prob, fill=shape)) +
geom_area(alpha=0.6 , size=1, colour="black")
data = read.table('/Users/jennygilbert/Documents/bevel_choice/by_participant_csv/01.csv', header=TRUE, sep=',')
library(ggplot2)
library(ggrepel)
library(data.table)
#Line plot of learned probabilities
## Need "long format" variable to plot all on the same graph via ggplot
setDT(data)
DT.m1 = melt(data, measure.vars = c("a_learnedprob_correct", "b_learnedprob_correct","c_learnedprob_correct",
"d_learnedprob_correct", "e_learnedprob_correct", "f_learnedprob_correct"),
variable.name = "shape", value.name = "learned_prob")
ggplot(DT.m1, aes(x=X, y=learned_prob, fill=shape)) +
geom_area(alpha=0.6 , size=1, colour="black")
ggplot(DT.m1, aes(x=X, y=learned_prob, fill=shape)) +
geom_area()
ggplot(DT.m1, aes(x=X, y=learned_prob, fill=shape)) +
geom_area(alpha=0.6 , size=1, colour="black")
ggplot(DT.m1, aes(x=X, y=learned_prob, fill=shape)) +
geom_line()
ggplot(DT.m1, aes(x=X, y=learned_prob, fill=shape)) + geom_area(alpha=0.6 , size=1, colour="black")
df <- na.omit(DT.m1)
ggplot(df, aes(x=X, y=learned_prob, fill=shape)) + geom_area(alpha=0.6 , size=1, colour="black")
ggplot(df, aes(x=X, y=learned_prob, fill=shape)) + geom_line() #geom_area(alpha=0.6 , size=1, colour="black")
ggplot(df, aes(x=X, y=learned_prob)) + geom_line(aes(colour=shape)) #geom_area(alpha=0.6 , size=1, colour="black")
#Plot learned probability
ggplot(df, aes(x=X, y=learned_prob)) + geom_line(aes(colour=shape)) + scale_fill_discrete(name = "Shape", labels = c("A (target 80%)", "B (target 20%)", "C (target 70%)","D (target 30%)","E (target 60%)","F (target 40%)"))#geom_area(alpha=0.6 , size=1, colour="black")
#Plot learned probability
ggplot(df, aes(x=X, y=learned_prob)) + geom_line(aes(colour=shape)) +
labs(title = "Learned Probability over time\n", x = "Trials", y = "Learned Probability", color = "Shapes\n") +
scale_colour_manual(labels = c("A (target 80%)", "B (target 20%)", "C (target 70%)","D (target 30%)","E (target 60%)","F (target 40%)"))
p + scale_color_manual(labels =
c("A (target 80%)", "B (target 20%)", "C (target 70%)",
"D (target 30%)","E (target 60%)","F (target 40%)"))
#Plot learned probability
p <- ggplot(df, aes(x=X, y=learned_prob)) + geom_line(aes(colour=shape)) +
labs(title = "Learned Probability over time\n", x = "Trials", y = "Learned Probability", color = "Shapes\n")
p + scale_color_manual(labels =
c("A (target 80%)", "B (target 20%)", "C (target 70%)",
"D (target 30%)","E (target 60%)","F (target 40%)"))
p + scale_color_manual(labels = c("A (target 80%)", "B (target 20%)", "C (target 70%)",
"D (target 30%)","E (target 60%)","F (target 40%)"), values = c("A"="blue", "B"="red", "C"="green", "D"="brown", "E"="orange", "F"="yellow"))
#Plot learned probability
p <- ggplot(df, aes(x=X, y=learned_prob)) + geom_line(aes(colour=shape)) +
labs(title = "Learned Probability over time\n", x = "Trials", y = "Learned Probability", color = "Shapes\n")
p
#Plot learned probability
ggplot(df, aes(x=X, y=learned_prob)) + geom_line(aes(colour=shape)) +
labs(title = "Learned Probability over time", x = "Trials", y = "Learned Probability", color = "Shapes")
#
describe(df$reinforcer_response)
library(psych)
#
describe(df$reinforcer_response)
prop.table(table(df$reinforcer_response))
df2 <- prop.table(table(df$reinforcer_response))
barplot(data$reinforcer_response, main="Car Distribution",
xlab="Number of Gears")
barplot(data$reinforcer_response)
counts <- prop.table(table(df$reinforcer_response))
barplot(counts)
barplot(counts, main="Response Distribution",
xlab="Percent of Responses")
DT.m1[DT.m1==""] <- NA
df <- na.omit(DT.m1)
counts <- prop.table(table(df$reinforcer_response))
barplot(counts, main="Response Distribution",
xlab="Percent of Responses")
data = read.table('/Users/jennygilbert/Documents/bevel_choice/by_participant_csv/01.csv', header=TRUE, sep=',')
library(ggplot2)
library(ggrepel)
library(data.table)
library(psych)
#Line plot of learned probabilities
## Need "long format" variable to plot all on the same graph via ggplot
setDT(data)
DT.m1 = melt(data, measure.vars = c("a_learnedprob_correct", "b_learnedprob_correct","c_learnedprob_correct",
"d_learnedprob_correct", "e_learnedprob_correct", "f_learnedprob_correct"),
variable.name = "Shape", value.name = "learned_prob")
#Get rid of the NA's and missing
DT.m1[DT.m1==""] <- NA
df <- na.omit(DT.m1)
#Plot learned probability
ggplot(df, aes(x=X, y=learned_prob)) + geom_line(aes(colour=shape)) +
labs(title = "Learned Probability over time", x = "Trials", y = "Learned Probability", color = "Shapes")
#Plot learned probability
ggplot(df, aes(x=X, y=learned_prob)) + geom_line(aes(colour=Shape)) +
labs(title = "Learned Probability over time", x = "Trials", y = "Learned Probability", color = "Shapes")
#Make a distribution of response to reinforcers
counts <- prop.table(table(df$reinforcer_response))
barplot(counts, main="Response Distribution",
xlab="Percent of Responses")
barplot(counts, main="Response Distribution",
ylab="Percent of Responses", xlab='Response to Reinforcement')
data = read.table('/Users/jennygilbert/Documents/bevel_choice/by_participant_csv/02.csv', header=TRUE, sep=',')
#Line plot of learned probabilities
## Need "long format" variable to plot all on the same graph via ggplot
setDT(data)
DT.m1 = melt(data, measure.vars = c("a_learnedprob_correct", "b_learnedprob_correct","c_learnedprob_correct",
"d_learnedprob_correct", "e_learnedprob_correct", "f_learnedprob_correct"),
variable.name = "Shape", value.name = "learned_prob")
#Get rid of the NA's and missing
DT.m1[DT.m1==""] <- NA
df <- na.omit(DT.m1)
#Plot learned probability
ggplot(df, aes(x=X, y=learned_prob)) + geom_line(aes(colour=Shape)) +
labs(title = "Learned Probability over time", x = "Trials", y = "Learned Probability", color = "Shapes")
#Make a distribution of response to reinforcers
counts <- prop.table(table(df$reinforcer_response))
barplot(counts, main="Response Distribution",
ylab="Percent of Responses", xlab='Response to Reinforcement')
df1 = read.table('/Users/jennygilbert/Documents/bevel_choice/by_participant_csv/02.csv', header=TRUE, sep=',')
df2 = read.table('/Users/jennygilbert/Documents/bevel_choice/by_participant_csv/02.csv', header=TRUE, sep=',')
#Line plot of learned probabilities
## Need "long format" variable to plot all on the same graph via ggplot
function(w) {
setDT(w)
DT.m1 = melt(w, measure.vars = c("a_learnedprob_correct", "b_learnedprob_correct","c_learnedprob_correct",
"d_learnedprob_correct", "e_learnedprob_correct", "f_learnedprob_correct"),
variable.name = "Shape", value.name = "learned_prob")
#Get rid of the NA's and missing
DT.m1[DT.m1==""] <- NA
df <- na.omit(DT.m1)
#Plot learned probability
ggplot(df, aes(x=X, y=learned_prob)) + geom_line(aes(colour=Shape)) +
labs(title = "Learned Probability over time", x = "Trials", y = "Learned Probability", color = "Shapes")
#Make a distribution of response to reinforcers
counts <- prop.table(table(df$reinforcer_response))
barplot(counts, main="Response Distribution",
ylab="Percent of Responses", xlab='Response to Reinforcement')
}
lapply(list(df1, df2), function(w))
lapply(list(df1, df2), function(w))
lapply(list(df1, df2), function(w)
lapply(list(df1, df2), function(w)
)
apply(df1, 1, w)
#Line plot of learned probabilities
## Need "long format" variable to plot all on the same graph via ggplot
f1 = function(w) {
setDT(w)
DT.m1 = melt(w, measure.vars = c("a_learnedprob_correct", "b_learnedprob_correct","c_learnedprob_correct",
"d_learnedprob_correct", "e_learnedprob_correct", "f_learnedprob_correct"),
variable.name = "Shape", value.name = "learned_prob")
#Get rid of the NA's and missing
DT.m1[DT.m1==""] <- NA
df <- na.omit(DT.m1)
#Plot learned probability
ggplot(df, aes(x=X, y=learned_prob)) + geom_line(aes(colour=Shape)) +
labs(title = "Learned Probability over time", x = "Trials", y = "Learned Probability", color = "Shapes")
#Make a distribution of response to reinforcers
counts <- prop.table(table(df$reinforcer_response))
barplot(counts, main="Response Distribution",
ylab="Percent of Responses", xlab='Response to Reinforcement')
}
apply(df1, 1, w)
apply(df1, 1, f1)
#Line plot of learned probabilities
## Need "long format" variable to plot all on the same graph via ggplot
f1 = function(w) {
setDT(w)
DT.m1 = melt(w, measure.vars = c("a_learnedprob_correct", "b_learnedprob_correct","c_learnedprob_correct",
"d_learnedprob_correct", "e_learnedprob_correct", "f_learnedprob_correct"),
variable.name = "Shape", value.name = "learned_prob")
#Get rid of the NA's and missing
DT.m1[DT.m1==""] <- NA
df <- na.omit(DT.m1)
#Plot learned probability
ggplot(df, aes(x=X, y=learned_prob)) + geom_line(aes(colour=Shape)) +
labs(title = "Learned Probability over time", x = "Trials", y = "Learned Probability", color = "Shapes")
#Make a distribution of response to reinforcers
counts <- prop.table(table(df$reinforcer_response))
barplot(counts, main="Response Distribution",
ylab="Percent of Responses", xlab='Response to Reinforcement')
}
f1(df1)
f1(df1)
f1(df1)
#Line plot of learned probabilities
## Need "long format" variable to plot all on the same graph via ggplot
f1 = function(w) {
setDT(w)
DT.m1 = melt(w, measure.vars = c("a_learnedprob_correct", "b_learnedprob_correct","c_learnedprob_correct",
"d_learnedprob_correct", "e_learnedprob_correct", "f_learnedprob_correct"),
variable.name = "Shape", value.name = "learned_prob")
#Get rid of the NA's and missing
DT.m1[DT.m1==""] <- NA
df <- na.omit(DT.m1)
#Plot learned probability
ggplot(df, aes(x=X, y=learned_prob)) + geom_line(aes(colour=Shape)) +
labs(title = "Learned Probability over time", x = "Trials", y = "Learned Probability", color = "Shapes")
#Make a distribution of response to reinforcers
#counts <- prop.table(table(df$reinforcer_response))
#barplot(counts, main="Response Distribution",
ylab="Percent of Responses", xlab='Response to Reinforcement')
}
#Line plot of learned probabilities
## Need "long format" variable to plot all on the same graph via ggplot
f1 = function(w) {
setDT(w)
DT.m1 = melt(w, measure.vars = c("a_learnedprob_correct", "b_learnedprob_correct","c_learnedprob_correct",
"d_learnedprob_correct", "e_learnedprob_correct", "f_learnedprob_correct"),
variable.name = "Shape", value.name = "learned_prob")
#Get rid of the NA's and missing
DT.m1[DT.m1==""] <- NA
df <- na.omit(DT.m1)
#Plot learned probability
ggplot(df, aes(x=X, y=learned_prob)) + geom_line(aes(colour=Shape)) +
labs(title = "Learned Probability over time", x = "Trials", y = "Learned Probability", color = "Shapes")
#Make a distribution of response to reinforcers
#counts <- prop.table(table(df$reinforcer_response))
#barplot(counts, main="Response Distribution",
#ylab="Percent of Responses", xlab='Response to Reinforcement')
}
f1(df1)
f1(df2)
#Line plot of learned probabilities
## Need "long format" variable to plot all on the same graph via ggplot
f1 = function(w) {
setDT(w)
DT.m1 = melt(w, measure.vars = c("a_learnedprob_correct", "b_learnedprob_correct","c_learnedprob_correct",
"d_learnedprob_correct", "e_learnedprob_correct", "f_learnedprob_correct"),
variable.name = "Shape", value.name = "learned_prob")
#Get rid of the NA's and missing
DT.m1[DT.m1==""] <- NA
df <- na.omit(DT.m1)
#Plot learned probability
ggplot(df, aes(x=X, y=learned_prob)) + geom_line(aes(colour=Shape)) +
labs(title = "Learned Probability over time", x = "Trials", y = "Learned Probability", color = "Shapes")
#Make a distribution of response to reinforcers
counts <- prop.table(table(df$reinforcer_response))
barplot(counts, main="Response Distribution",
ylab="Percent of Responses", xlab='Response to Reinforcement')
}
f1(df2)
#Line plot of learned probabilities
## Need "long format" variable to plot all on the same graph via ggplot
f1 = function(w) {
setDT(w)
DT.m1 = melt(w, measure.vars = c("a_learnedprob_correct", "b_learnedprob_correct","c_learnedprob_correct",
"d_learnedprob_correct", "e_learnedprob_correct", "f_learnedprob_correct"),
variable.name = "Shape", value.name = "learned_prob")
#Get rid of the NA's and missing
DT.m1[DT.m1==""] <- NA
df <- na.omit(DT.m1)
#Plot learned probability
ggplot(df, aes(x=X, y=learned_prob)) + geom_line(aes(colour=Shape)) +
labs(title = "Learned Probability over time", x = "Trials", y = "Learned Probability", color = "Shapes")
#Make a distribution of response to reinforcers
counts <- prop.table(table(df$reinforcer_response))
barplot(counts, main="Response Distribution",
ylab="Percent of Responses", xlab='Response to Reinforcement')
}
f1(df2)
#Line plot of learned probabilities
## Need "long format" variable to plot all on the same graph via ggplot
f1 = function(w) {
setDT(w)
DT.m1 = melt(w, measure.vars = c("a_learnedprob_correct", "b_learnedprob_correct","c_learnedprob_correct",
"d_learnedprob_correct", "e_learnedprob_correct", "f_learnedprob_correct"),
variable.name = "Shape", value.name = "learned_prob")
#Get rid of the NA's and missing
DT.m1[DT.m1==""] <- NA
df <- na.omit(DT.m1)
#Plot learned probability
ggplot(df, aes(x=X, y=learned_prob)) + geom_line(aes(colour=Shape)) +
labs(title = "Learned Probability over time", x = "Trials", y = "Learned Probability", color = "Shapes")
}
#Make a distribution of response to reinforcers
f2 = function(w) {
counts <- prop.table(table(df$reinforcer_response))
barplot(counts, main="Response Distribution",
ylab="Percent of Responses", xlab='Response to Reinforcement')
}
f1(df2)
f2(df2)
list.files(pattern = ".csv")
getwd()
setwd("/Users/jennygilbert/Documents/bevel_choice/by_participant_csv")
list.files(pattern = ".csv")
pal <- colorRampPalette(colors = c("lightblue", "blue"))(5)
counts <- prop.table(table(df$reinforcer_response))
barplot(counts, main="Response Distribution",
ylab="Percent of Responses", xlab='Response to Reinforcement', col = pal)
barplot(counts, main="Response Distribution",
ylab="Percent of Responses", xlab='Response to Reinforcement', col = rainbow(5))
setwd("/Users/jennygilbert/Documents/bevel_choice/by_participant_csv")
mylist <- list.files(pattern = ".csv")
for (i in mylist)
f1(i)
f2(i)
#Line plot of learned probabilities
## Need "long format" variable to plot all on the same graph via ggplot
f1 = function(w) {
df1 = read.table(i, header=TRUE, sep=',')
setDT(df1)
DT.m1 = melt(df1, measure.vars = c("a_learnedprob_correct", "b_learnedprob_correct","c_learnedprob_correct",
"d_learnedprob_correct", "e_learnedprob_correct", "f_learnedprob_correct"),
variable.name = "Shape", value.name = "learned_prob")
#Get rid of the NA's and missing
DT.m1[DT.m1==""] <- NA
df <- na.omit(DT.m1)
#Plot learned probability
ggplot(df, aes(x=X, y=learned_prob)) + geom_line(aes(colour=Shape)) +
labs(title = "Learned Probability over time", x = "Trials", y = "Learned Probability", color = "Shapes")
}
#Make a distribution of response to reinforcers
f2 = function(w) {
counts <- prop.table(table(df$reinforcer_response))
barplot(counts, main="Response Distribution",
ylab="Percent of Responses", xlab='Response to Reinforcement', col = col = rainbow(5))
}
#use both functions to make plots
f1(df2)
f2(df2)
setwd("/Users/jennygilbert/Documents/bevel_choice/by_participant_csv")
mylist <- list.files(pattern = ".csv")
for (i in mylist)
f1(i)
f2(i)
for (i in mylist)
df1 = read.table(i, header=TRUE, sep=',')
#Line plot of learned probabilities
## Need "long format" variable to plot all on the same graph via ggplot
f1 = function(w) {
setDT(w)
DT.m1 = melt(w, measure.vars = c("a_learnedprob_correct", "b_learnedprob_correct","c_learnedprob_correct",
"d_learnedprob_correct", "e_learnedprob_correct", "f_learnedprob_correct"),
variable.name = "Shape", value.name = "learned_prob")
#Get rid of the NA's and missing
DT.m1[DT.m1==""] <- NA
df <- na.omit(DT.m1)
#Plot learned probability
ggplot(df, aes(x=X, y=learned_prob)) + geom_line(aes(colour=Shape)) +
labs(title = "Learned Probability over time", x = "Trials", y = "Learned Probability", color = "Shapes")
}
#Make a distribution of response to reinforcers
f2 = function(w) {
counts <- prop.table(table(w$reinforcer_response))
barplot(counts, main="Response Distribution",
ylab="Percent of Responses", xlab='Response to Reinforcement', col = col = rainbow(5))
}
setwd("/Users/jennygilbert/Documents/bevel_choice/by_participant_csv")
mylist <- list.files(pattern = ".csv")
for (i in mylist)
df1 = read.table(i, header=TRUE, sep=',')
f1(df1)
f2(df1)
#Make a distribution of response to reinforcers
f2 = function(w) {
counts <- prop.table(table(w$reinforcer_response))
barplot(counts, main="Response Distribution",
ylab="Percent of Responses", xlab='Response to Reinforcement', col = col = rainbow(5))
}
#Make a distribution of response to reinforcers
f2 = function(w) {
counts <- prop.table(table(w$reinforcer_response))
barplot(counts, main="Response Distribution",
ylab="Percent of Responses", xlab='Response to Reinforcement', col = col = rainbow(5)) }
#Make a distribution of response to reinforcers
f2 = function(w) {
counts <- prop.table(table(w$reinforcer_response))
barplot(counts, main="Response Distribution",
ylab="Percent of Responses", xlab='Response to Reinforcement', col = rainbow(5)) }
for (i in mylist)
df1 = read.table(i, header=TRUE, sep=',')
f1(df1)
f2(df1)
for i in mylist
df = read.table(i, header=TRUE, sep=',')
for (1 in mylist)
df = read.table(i, header=TRUE, sep=',')
#Make a distribution of response to reinforcers
f2 = function(w) {
pdf(file = w, width = 4, height = 4)
counts <- prop.table(table(w$reinforcer_response))
barplot(counts, main="Response Distribution",
ylab="Percent of Responses", xlab='Response to Reinforcement', col = rainbow(5))
dev.off() }
f2(df)
#Make a distribution of response to reinforcers
f2 = function(w) {
pdf(file = 'plot', width = 4, height = 4)
counts <- prop.table(table(w$reinforcer_response))
barplot(counts, main="Response Distribution",
ylab="Percent of Responses", xlab='Response to Reinforcement', col = rainbow(5))
dev.off() }
setwd("/Users/jennygilbert/Documents/bevel_choice/by_participant_csv")
mylist <- list.files(pattern = ".csv")
for (i in mylist)
df = read.table(i, header=TRUE, sep=',')
f1(df)
f2(df)
#Make a distribution of response to reinforcers
f2 = function(w) {
w[w==""] <- NA
df <- na.omit(w)
pdf(file = 'plot', width = 4, height = 4)
counts <- prop.table(table(df$reinforcer_response))
barplot(counts, main="Response Distribution",
ylab="Percent of Responses", xlab='Response to Reinforcement', col = rainbow(5))
dev.off() }
setwd("/Users/jennygilbert/Documents/bevel_choice/by_participant_csv")
mylist <- list.files(pattern = ".csv")
for (i in mylist)
df = read.table(i, header=TRUE, sep=',')
f1(df)
f2(df)
#Make a distribution of response to reinforcers
f2 = function(w) {
pdf(file = 'plot', width = 4, height = 4)
counts <- prop.table(table(df$reinforcer_response))
barplot(counts, main="Response Distribution",
ylab="Percent of Responses", xlab='Response to Reinforcement', col = rainbow(5))
dev.off() }
setwd("/Users/jennygilbert/Documents/bevel_choice/by_participant_csv")
mylist <- list.files(pattern = ".csv")
for (i in mylist)
df = read.table(i, header=TRUE, sep=',')
f1(df)
f2(df)
for (i in mylist)
print(i)
for (i in mylist)
print(i)
df = read.table(i, header=TRUE, sep=',')
f1(df)
f2(df)
